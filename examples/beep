#!/usr/bin/env hbcxx

/*
 * beep
 *
 * Part of hbcxx - executable C++ source code
 *
 * Copyright (C) 2014 Daniel Thompson <daniel@redfelineninja.org.uk>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 */

/*!
 * \file beep
 *
 * This example synthesizes a beep sound and plays it using ALSA (making
 * this example Linux only).
 *
 * The main point of note is that the inclusion of asoundlib.h is 
 * automatically recognised meaning this file can contain no hash
 * bang directives beyond the single one at the top of the file.
 *
 * For simplicity and compactness the ALSA boilerplate code is combined 
 * into a single class alongside the DSP. This should not be regarded
 * as best practice.
 */

#include <array>
#include <cstdint>
#include <iostream>
#include <random>
#include <stdexcept>
#include <string>

#include <alsa/asoundlib.h>

//! A C++11 user-defined literal to yield std::string.
std::string operator"" _s (const char *str, size_t sz)
{
    return std::string{str};
}

class Beeper {
public:
    Beeper();
    ~Beeper();

    void play();

private:
    snd_pcm_t* handle;

    unsigned int offset;
    float prev;
    std::array<float, 112> delayBuffer;

    size_t remainingNoise;
    std::minstd_rand noise;
    std::uniform_real_distribution<> distribution;

    float tick();
};

Beeper::Beeper()
        : handle{nullptr}
	, offset{ 0 }, prev{ 0.0 }, delayBuffer{} 
        , remainingNoise{delayBuffer.size()}, noise{}, distribution{-0.5, 0.5}
{
    auto err = snd_pcm_open(&handle, "default", SND_PCM_STREAM_PLAYBACK, 0);
    if (err < 0)
	throw std::runtime_error{"snd_pcm_open: "_s + snd_strerror(err)};

    err = snd_pcm_set_params(handle, SND_PCM_FORMAT_S16,
                             SND_PCM_ACCESS_RW_INTERLEAVED, 1, 44100, 1,
                             500000);
    if (err < 0)
	throw std::runtime_error{"snd_pcm_set_params: "_s + snd_strerror(err)};
}

Beeper::~Beeper()
{
    snd_pcm_close(handle);
}

void Beeper::play()
{
    std::array<int16_t, 8 * 1024> buffer;

    for (auto i = 0; i < 16; i++) {
        for (auto j = 0; j < buffer.size(); j++)
            buffer[j] = tick() * 32767.9;

        auto frames = snd_pcm_writei(handle, buffer.data(), buffer.size());
        if (frames < 0) {
            auto err = snd_pcm_recover(handle, frames, 0);
	    if (err < 0)
                throw std::runtime_error{"snd_pcm_writei: "_s
                                         + snd_strerror(err)};
        } else if (frames > 0 && frames < buffer.size()) {
            std::cout << "Short write (expected " << buffer.size() << ",wrote "
                      << frames << ")" << std::endl;
	}
    }
}

//! Synthesize some sound using the Karplus-Strong method.
float Beeper::tick()
{
    offset = (offset + 1 < delayBuffer.size() ? offset + 1 : 0);
    auto curr = delayBuffer[offset];

    if (remainingNoise) {
        remainingNoise--;
        curr += distribution(noise);
    }

    delayBuffer[offset] = (prev + curr) * 0.995;
    return curr;
}

int main()
{
    try {
        Beeper b;
        b.play();
    }
    catch (std::runtime_error &e) {
	std::cerr << "error: " << e.what() << std::endl;
	return 1;
    }

    return 0;
}
